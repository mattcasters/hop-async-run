<?xml version="1.0" encoding="UTF-8"?>
<workflow>
  <name>dynamic-model-update</name>
  <name_sync_with_filename>Y</name_sync_with_filename>
  <description/>
  <extended_description/>
  <workflow_version/>
  <created_user>-</created_user>
  <created_date>2021/09/15 10:02:16.267</created_date>
  <modified_user>-</modified_user>
  <modified_date>2021/09/15 10:02:16.267</modified_date>
  <parameters>
    </parameters>
  <actions>
    <action>
      <name>Start</name>
      <description/>
      <type>SPECIAL</type>
      <attributes/>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <xloc>144</xloc>
      <yloc>96</yloc>
      <attributes_hac/>
    </action>
    <action>
      <name>update model</name>
      <description/>
      <type>EVAL</type>
      <attributes/>
      <script>
var registry = Packages.org.apache.hop.core.plugins.PluginRegistry.getInstance();
var metaPluginType = Packages.org.apache.hop.metadata.plugin.MetadataPluginType.getInstance();
var metaPluginTypeClass = metaPluginType.getClass();

var graphModelPlugin = registry.getPlugin(metaPluginTypeClass, "neo4j-graph-model");

var classloader = registry.getClassLoader(graphModelPlugin);

// Get the JSON...
//
var contentString = action.getVariable("ASYNC_CONTENT");

// Load the importer class...
//
var importerClass = classloader.loadClass("org.apache.hop.neo4j.model.cw.CypherWorkbenchImporter");
var graphModelClass = classloader.loadClass("org.apache.hop.neo4j.model.GraphModel");

var stringClass = new Packages.java.lang.String().getClass();
var method = importerClass.getMethod("importFromCwJson", stringClass);

// Generate the graph model
var graphModel = method.invoke(null, contentString);

// Now change the names to labels...
//
var method2 = importerClass.getMethod("changeNamesToLabels", graphModelClass);
graphModel = method2.invoke(null, graphModel); 

// Now we save the model...
//
var provider = parent_workflow.getMetadataProvider();
var serializer = provider.getSerializer(graphModelClass);

// Save the graph model...
//
serializer.save(graphModel);

serializer.exists(graphModel.getName());
</script>
      <parallel>N</parallel>
      <xloc>320</xloc>
      <yloc>96</yloc>
      <attributes_hac/>
    </action>
  </actions>
  <hops>
    <hop>
      <from>Start</from>
      <to>update model</to>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes/>
</workflow>
